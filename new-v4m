#!/bin/bash

# new-v4m - Simplified QEMU VM wrapper
# Usage: sudo ./new-v4m [--name NAME] [--distro DISTRO] [--user USER] [--pass PASS]

set -e

# Trap to restore cursor on exit
cleanup() {
    tput cnorm 2>/dev/null || true
}
trap cleanup EXIT INT TERM

V4M_DIR="$HOME/.v4m"
DISTROS_DIR="$V4M_DIR/distros"
VMS_DIR="$V4M_DIR/vms"
DEFAULT_DISTRO="debian12"
DEFAULT_USER="user01"
DEFAULT_MEMORY="4096"
DEFAULT_CPUS="4"
DEFAULT_DISK_SIZE="20G"

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Spinner function
show_spinner() {
    local message="$1"
    local duration="${2:-30}"
    local spin='‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è'
    local spin_length=${#spin}
    
    tput civis
    for i in $(seq 1 $duration); do
        local spinner_char=$((i % spin_length))
        printf "\r${BLUE}${spin:$spinner_char:1}${NC} $message "
        sleep 0.033
    done
    tput cnorm
}

log_info() {
    echo -e "${BLUE}‚Ñπ${NC} $1"
}

log_success() {
    echo -e "${GREEN}‚úì${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_root() {
    if [ "$EUID" -ne 0 ]; then
        log_error "This script requires sudo privileges for vmnet-bridged networking: please run: sudo $0"
        exit 1
    fi
}

init_dirs() {
    mkdir -p "$DISTROS_DIR" "$VMS_DIR"
}

generate_vm_name() {
    local adjectives=("fast" "quick" "smart" "bright" "cool" "swift" "agile" "sharp" "clever" "rapid")
    local nouns=("vm" "box" "node" "server" "instance" "machine" "host" "system" "unit" "engine")
    local adj=${adjectives[$RANDOM % ${#adjectives[@]}]}
    local noun=${nouns[$RANDOM % ${#nouns[@]}]}
    local num=$((RANDOM % 100))
    echo "${adj}-${noun}-${num}"
}

generate_password() {
    openssl rand -base64 12 | tr -d "=+/" | cut -c1-12
}

sanitize_vm_name() {
    local name="$1"
    echo "$name" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g'
}

get_distro_url() {
    case "$1" in
        "debian12")
            echo "https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-arm64.qcow2"
            ;;
        "ubuntu22")
            echo "https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-arm64.img"
            ;;
        "ubuntu24")
            echo "https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-arm64.img"
            ;;
        *)
            echo ""
            ;;
    esac
}

ensure_distro() {
    local distro="$1"
    local url=$(get_distro_url "$distro")
    
    if [ -z "$url" ]; then
        log_error "Unknown distro: $distro"
        log_info "Available distros: debian12, ubuntu22, ubuntu24"
        exit 1
    fi
    
    local filename=$(basename "$url")
    local distro_dir="$DISTROS_DIR/$distro"
    local distro_path="$distro_dir/$filename"
    
    if [ -f "$distro_path" ]; then
        echo "$distro_path"
        return
    fi
    
    show_spinner "Downloading $distro" 100 &
    local spinner_pid=$!
    mkdir -p "$distro_dir"
    if curl -L -o "$distro_path" "$url" --silent; then
        kill $spinner_pid 2>/dev/null
        printf "\r\033[K"
        log_success "Downloaded $distro"
        echo "$distro_path"
    else
        kill $spinner_pid 2>/dev/null
        printf "\r\033[K"
        log_error "Failed to download $distro"
        rm -f "$distro_path"
        exit 1
    fi
}

generate_mac() {
    printf "52:54:00:%02x:%02x:%02x\n" $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256))
}

hash_password() {
    local password="$1"
    openssl passwd -6 "$password"
}

create_cloud_init() {
    local vm_name="$1"
    local username="$2"
    local password="$3"
    local vm_dir="$4"
    
    local hashed_pass=$(hash_password "$password")
    
    cat > "$vm_dir/user-data" << EOF
#cloud-config

# System settings
hostname: $vm_name
fqdn: $vm_name.local
timezone: Europe/Rome

# Enable SSH password authentication
ssh_pwauth: true
disable_root: false

# Network configuration for DHCP
network:
  version: 2
  ethernets:
    enp0s1:
      dhcp4: true
      dhcp6: true

# Users
users:
  - name: $username
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: [sudo, users]
    shell: /bin/bash
    lock_passwd: false
    passwd: $hashed_pass
  - name: root
    lock_passwd: false
    passwd: $hashed_pass

# Packages to install
packages:
  - openssh-server
  - sudo
  - curl
  - wget
  - vim
  - net-tools
  - htop
  - avahi-daemon
  - avahi-utils

# Commands to run after boot
runcmd:
  - systemctl enable ssh
  - systemctl start ssh
  - systemctl enable avahi-daemon
  - systemctl start avahi-daemon
  - echo "VM is ready!" > /tmp/vm-ready

# Final message
final_message: "VM $vm_name is ready! SSH available on port 22."
EOF

    cat > "$vm_dir/meta-data" << EOF
instance-id: $vm_name-$(date +%s)
local-hostname: $vm_name
EOF
}

create_vm() {
    local vm_name="$1"
    local distro="$2"
    local username="$3"
    local password="$4"
    
    
    local distro_path=$(ensure_distro "$distro")
    
    local vm_dir="$VMS_DIR/$vm_name"
    if [ -d "$vm_dir" ]; then
        log_error "VM $vm_name already exists"
        exit 1
    fi
    mkdir -p "$vm_dir"
    
    local vm_disk="$vm_dir/disk.qcow2"
    cp "$distro_path" "$vm_disk"
    qemu-img resize "$vm_disk" "$DEFAULT_DISK_SIZE" >/dev/null
    
    local vm_mac=$(generate_mac)
    
    local efi_vars="$vm_dir/efi-vars.fd"
    if [ -f "/opt/homebrew/share/qemu/edk2-aarch64-vars.fd" ]; then
        cp "/opt/homebrew/share/qemu/edk2-aarch64-vars.fd" "$efi_vars"
    else
        dd if=/dev/zero of="$efi_vars" bs=1M count=64 >/dev/null 2>&1
    fi
    
    create_cloud_init "$vm_name" "$username" "$password" "$vm_dir"
    
    local cloud_init_iso="$vm_dir/cloud-init.iso"
    local temp_dir="/tmp/cloud-init-$$"
    mkdir -p "$temp_dir"
    cp "$vm_dir/user-data" "$vm_dir/meta-data" "$temp_dir/"
    
    if ! hdiutil makehybrid -iso -joliet -default-volume-name "cidata" -o "$cloud_init_iso" "$temp_dir" >/dev/null 2>&1; then
        log_error "Failed to create cloud-init ISO"
        rm -rf "$temp_dir" "$vm_dir"
        exit 1
    fi
    rm -rf "$temp_dir"
    
    cat > "$vm_dir/vm-info.json" << EOF
{
    "name": "$vm_name",
    "distro": "$distro",
    "username": "$username",
    "password": "$password",
    "mac": "$vm_mac",
    "memory": "$DEFAULT_MEMORY",
    "cpus": "$DEFAULT_CPUS",
    "disk_size": "$DEFAULT_DISK_SIZE",
    "created": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
}
EOF
    
    
    start_vm "$vm_name" "$vm_mac" "$vm_dir"
}

start_vm() {
    local vm_name="$1"
    local vm_mac="$2"
    local vm_dir="$3"
    
    local vm_disk="$vm_dir/disk.qcow2"
    local cloud_init_iso="$vm_dir/cloud-init.iso"
    local efi_vars="$vm_dir/efi-vars.fd"
    local log_file="$vm_dir/console.log"
    local monitor_socket="$vm_dir/monitor.sock"
    local pid_file="$vm_dir/vm.pid"
    
    
    local bridge_interface=$(route get default | grep interface | awk '{print $2}')
    if [ -z "$bridge_interface" ]; then
        bridge_interface="en0"
    fi
    
    > "$log_file"
    rm -f "$monitor_socket"
    
    nohup qemu-system-aarch64 \
        -machine virt \
        -cpu host \
        -accel hvf \
        -smp "$DEFAULT_CPUS" \
        -m "$DEFAULT_MEMORY" \
        -drive if=pflash,format=raw,file=/opt/homebrew/share/qemu/edk2-aarch64-code.fd,readonly=on \
        -drive if=pflash,format=raw,file="$efi_vars" \
        -drive file="$vm_disk",format=qcow2,if=virtio \
        -drive file="$cloud_init_iso",media=cdrom,if=virtio,readonly=on \
        -netdev vmnet-bridged,id=net0,ifname="$bridge_interface" \
        -device virtio-net,netdev=net0,mac="$vm_mac" \
        -global PIIX4_PM.disable_s3=1 \
        -monitor unix:"$monitor_socket",server,nowait \
        -serial unix:"$vm_dir/console.sock",server,nowait \
        -device virtio-serial \
        -chardev socket,path="$vm_dir/qga.sock",server=on,wait=off,id=qga0 \
        -device virtserialport,chardev=qga0,name=org.qemu.guest_agent.0 \
        -nographic > "$log_file" 2>&1 &
    
    local qemu_pid=$!
    echo $qemu_pid > "$pid_file"
    disown $qemu_pid
    
    
    local boot_time=200
    local spin='‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è'
    local spin_length=${#spin}
    
    tput civis
    for i in $(seq 1 $boot_time); do
        local spinner_char=$((i % spin_length))
        printf "\r${BLUE}${spin:$spinner_char:1}${NC} Starting VM $vm_name (may take up to 1 minute)..."
        sleep 0.1
        
        if ! kill -0 "$qemu_pid" 2>/dev/null; then
            printf "\r\033[K"
            tput cnorm
            log_error "VM $vm_name stopped unexpectedly"
            log_info "Check log: $log_file"
            exit 1
        fi
    done
    tput cnorm
    
    printf "\r\033[K"
    log_success "VM $vm_name is ready!"
    
    show_vm_info "$vm_name" "$vm_dir"
}

show_vm_info() {
    local vm_name="$1"
    local vm_dir="$2"
    local vm_info="$vm_dir/vm-info.json"
    
    if [ ! -f "$vm_info" ]; then
        log_error "VM info file not found"
        return
    fi
    
    local username=$(grep '"username"' "$vm_info" | cut -d'"' -f4)
    local password=$(grep '"password"' "$vm_info" | cut -d'"' -f4)
    local mac=$(grep '"mac"' "$vm_info" | cut -d'"' -f4)
    
    echo
    echo -e "${YELLOW}VM Information:${NC}"
    echo "  üñ•Ô∏è  Name: $vm_name"
    echo "  üíæ Memory: ${DEFAULT_MEMORY}MB"
    echo "  üîß CPUs: $DEFAULT_CPUS"
    echo
    echo -e "${YELLOW}Login Credentials:${NC}"
    echo "  üë§ Username: $username"
    echo "  üîë Password: $password"
    echo "  üëë Root password: $password (same as user)"
    echo "  üì∫ SSH: ssh $username@$vm_name.local"
    echo
    echo -e "${YELLOW}VM Management:${NC}"
    echo "  ‚èπÔ∏è  Stop: kill \$(cat $vm_dir/vm.pid)"
    echo
}

main() {
    local vm_name=""
    local distro="$DEFAULT_DISTRO"
    local username="$DEFAULT_USER"
    local password=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --name)
                vm_name="$2"
                shift 2
                ;;
            --distro)
                distro="$2"
                shift 2
                ;;
            --user)
                username="$2"
                shift 2
                ;;
            --pass)
                password="$2"
                shift 2
                ;;
            -h|--help)
                echo "Usage: sudo $0 [OPTIONS]"
                echo
                echo "Options:"
                echo "  --name NAME     VM name (default: random)"
                echo "  --distro DIST   Distribution (default: debian12)"
                echo "  --user USER     Username (default: user01)"
                echo "  --pass PASS     Password (default: auto-generated)"
                echo
                echo "Available distros: debian12, ubuntu22, ubuntu24"
                echo
                echo "Examples:"
                echo "  sudo $0                                    # Create VM with all defaults"
                echo "  sudo $0 --name myvm --user john            # Create VM 'myvm' with user 'john'"
                echo "  sudo $0 --distro ubuntu22 --pass secret123 # Create Ubuntu VM with custom password"
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                log_info "Use --help for usage information"
                exit 1
                ;;
        esac
    done
    
    if [ -z "$vm_name" ]; then
        vm_name=$(generate_vm_name)
    else
        local original_name="$vm_name"
        vm_name=$(sanitize_vm_name "$vm_name")
        if [ "$original_name" != "$vm_name" ]; then
            log_warning "VM name sanitized for DNS compatibility: '$original_name' ‚Üí '$vm_name'"
        fi
    fi
    
    if [ -z "$password" ]; then
        password=$(generate_password)
    fi
    
    check_root
    init_dirs
    
    if ! command -v qemu-system-aarch64 >/dev/null 2>&1; then
        log_error "QEMU not found. Please install QEMU:"
        log_error "  brew install qemu"
        exit 1
    fi
    
    create_vm "$vm_name" "$distro" "$username" "$password"
}

main "$@"